package com.camper.www.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.ArrayList;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;

import com.camper.www.dto.CampgroundDto;
import com.camper.www.dto.CampsiteDto;

public class CampgroundDao {
	public static final int FAIL = 0;
	public static final int SUCCESS = 1;
	private DataSource ds;
	private CampgroundDao() {
		try {
			Context ctx = new InitialContext();
			ds = (DataSource) ctx.lookup("java:comp/env/jdbc/Oracle11g");
		} catch (NamingException e) {
			System.out.println(e.getMessage());
		}
	}
	private static CampgroundDao instance = new CampgroundDao();
	public static CampgroundDao getInstance() {
		return instance;
	}
	// 1. 캠핑장 등록
	public int registerCampground(CampgroundDto cg) {
		int result = FAIL;
		Connection conn = null;
		PreparedStatement pstmt = null;
		String sql = "INSERT INTO HOST_CAMPGROUND " + 
				"    VALUES ('CG'||TO_CHAR(HOST_CAMPGROUND_NO_SEQ.NEXTVAL), ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, 'N', SYSDATE)";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, cg.getS_camp_name());
			pstmt.setString(2, cg.getS_camp_desc());
			pstmt.setString(3, cg.getS_camp_addr());
			pstmt.setString(4, cg.getS_hid());
			pstmt.setString(5, cg.getS_camp_mainpic());
			pstmt.setString(6, cg.getS_camp_mappic());
			pstmt.setString(7, cg.getS_camp_pic1());
			pstmt.setString(8, cg.getS_camp_pic2());
			pstmt.setString(9, cg.getS_camp_pic3());
			pstmt.setString(10, cg.getS_camp_pic4());
			pstmt.setString(11, cg.getS_camp_pic5());
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn  != null) conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 2. 캠핑장 지우기 전 캠프사이트 삭제
	private int preWithdrawalCampsite(String s_camp_no) {
		int result = FAIL;
		Connection        conn  = null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE HOST_CAMPSITE SET CS_DEL_YN = 'Y' WHERE S_CAMP_NO = ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, s_camp_no);
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn  != null) conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 3. 캠프장 삭제
	public int withdrawalCampground(String s_camp_no) {
		int result = FAIL;
		preWithdrawalCampsite(s_camp_no);
		Connection        conn  = null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE HOST_CAMPGROUND SET CG_DEL_YN = 'Y' WHERE S_CAMP_NO = ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, s_camp_no);
			result = pstmt.executeUpdate();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}finally {
			try {
				if(pstmt != null) pstmt.close();
				if(conn  != null) conn.close();
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 4. 캠핑장 정보 수정
	public int modifyCampground(CampgroundDto cg) {
		int result = FAIL;
		Connection conn 		= null;
		PreparedStatement pstmt = null;
		String sql = "UPDATE HOST_CAMPGROUND SET S_CAMP_NAME = ?, " + 
				"                            S_CAMP_DESC = ?, " + 
				"                            S_CAMP_ADDR = ?, " + 
				"                            S_CAMP_MAINPIC = ?, " + 
				"                            S_CAMP_MAPPIC = ?, " + 
				"                            S_CAMP_PIC1 = ?, " + 
				"                            S_CAMP_PIC2 = ?, " + 
				"                            S_CAMP_PIC3 = ?, " + 
				"                            S_CAMP_PIC4 = ?, " + 
				"                            S_CAMP_PIC5 = ?" + 
				"                        WHERE S_CAMP_NO = ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, cg.getS_camp_name());
			pstmt.setString(2, cg.getS_camp_desc());
			pstmt.setString(3, cg.getS_camp_addr());
			pstmt.setString(4, cg.getS_camp_mainpic());
			pstmt.setString(5, cg.getS_camp_mappic());
			pstmt.setString(6, cg.getS_camp_pic1());
			pstmt.setString(7, cg.getS_camp_pic2());
			pstmt.setString(8, cg.getS_camp_pic3());
			pstmt.setString(9, cg.getS_camp_pic4());
			pstmt.setString(10, cg.getS_camp_pic5());
			pstmt.setString(11, cg.getS_camp_no());
			result = pstmt.executeUpdate();
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(pstmt!=null) pstmt.close();
				if(conn !=null) conn.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return result;
	}
	// 5. 내 캠핑장 수
	public int getCampgroundCnt(String s_hid) {
		int totCnt = 0;
		CampsiteDto campsite = null;
		Connection conn 		= null;
		PreparedStatement pstmt = null;
		ResultSet rs 			= null;
		String sql = "SELECT COUNT(*) CNT FROM HOST_CAMPGROUND WHERE S_HID = ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, s_hid);
			rs = pstmt.executeQuery();
			rs.next();
			totCnt = rs.getInt(1);
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(rs	!=null) rs.close();
				if(pstmt!=null) pstmt.close();
				if(conn !=null) conn.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return totCnt;
	}
	// 5. 등록된 내 캠프장 목록
	public ArrayList<CampgroundDto> listCampground(String s_hid, int startRow, int endRow) {
		ArrayList<CampgroundDto> groundList = new ArrayList<CampgroundDto>();
		Connection conn 		= null;
		PreparedStatement pstmt = null;
		ResultSet rs 			= null;
		String sql = "SELECT S_CAMP_NO, S_CAMP_NAME FROM (SELECT ROWNUM RN, A.* FROM (SELECT * FROM HOST_CAMPGROUND WHERE S_HID = ? ORDER BY CG_RDATE DESC) A) WHERE RN BETWEEN ? AND ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, s_hid);
			pstmt.setInt(2, startRow);
			pstmt.setInt(3, endRow);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				String s_camp_no = rs.getString("s_camp_no");
				String s_camp_name = rs.getString("s_camp_name");
				String s_camp_desc = rs.getString("s_camp_desc");
				String s_camp_addr = rs.getString("s_camp_addr");
				String s_camp_mainpic = rs.getString("s_camp_mainpic");
				String s_camp_mappic = rs.getString("s_camp_mappic");
				String s_camp_pic1 = rs.getString("s_camp_pic1");
				String s_camp_pic2 = rs.getString("s_camp_pic2");
				String s_camp_pic3 = rs.getString("s_camp_pic3");
				String s_camp_pic4 = rs.getString("s_camp_pic4");
				String s_camp_pic5 = rs.getString("s_camp_pic5");
				String cg_del_yn = rs.getString("cg_del_yn");
				Timestamp cg_rdate = rs.getTimestamp("cg_rdate");
				groundList.add(new CampgroundDto(s_camp_no, s_camp_name, s_camp_desc, s_camp_addr, s_hid, s_camp_mainpic, s_camp_mappic, s_camp_pic1, s_camp_pic2, s_camp_pic3, s_camp_pic4, s_camp_pic5, cg_del_yn, cg_rdate));
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(rs	!=null) rs.close();
				if(pstmt!=null) pstmt.close();
				if(conn !=null) conn.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return groundList;
	}
	// 6. 캠프장 상세보기
	public CampgroundDto viewCampground(String s_camp_no) {
		CampgroundDto cgView = null;
		Connection conn 		= null;
		PreparedStatement pstmt = null;
		ResultSet rs 			= null;
		String sql = "SELECT S_CAMP_NAME, S_CAMP_DESC, S_CAMP_ADDR, S_CAMP_MAINPIC, S_CAMP_MAPPIC, S_CAMP_PIC1, S_CAMP_PIC2, S_CAMP_PIC3, S_CAMP_PIC4, S_CAMP_PIC5 FROM HOST_CAMPGROUND WHERE S_CAMP_NO = ?";
		try {
			conn = ds.getConnection();
			pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, s_camp_no);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				String s_camp_name = rs.getString("s_camp_name");
				String s_camp_desc = rs.getString("s_camp_desc");
				String s_camp_addr = rs.getString("s_camp_addr");
				String s_hid = rs.getString("s_hid");
				String s_camp_mainpic = rs.getString("s_camp_mainpic");
				String s_camp_mappic = rs.getString("s_camp_mappic");
				String s_camp_pic1 = rs.getString("s_camp_pic1");
				String s_camp_pic2 = rs.getString("s_camp_pic2");
				String s_camp_pic3 = rs.getString("s_camp_pic3");
				String s_camp_pic4 = rs.getString("s_camp_pic4");
				String s_camp_pic5 = rs.getString("s_camp_pic5");
				String cg_del_yn = rs.getString("cg_del_yn");
				Timestamp cg_rdate = rs.getTimestamp("cg_rdate");
				cgView = new CampgroundDto(s_camp_no, s_camp_name, s_camp_desc, s_camp_addr, s_hid, s_camp_mainpic, s_camp_mappic, s_camp_pic1, s_camp_pic2, s_camp_pic3, s_camp_pic4, s_camp_pic5, cg_del_yn, cg_rdate);
			}
		} catch (SQLException e) {
			System.out.println(e.getMessage());
		} finally {
			try {
				if(rs	!=null) rs.close();
				if(pstmt!=null) pstmt.close();
				if(conn !=null) conn.close();
			} catch (SQLException e) {
				System.out.println(e.getMessage());
			}
		}
		return cgView;
	}
}
